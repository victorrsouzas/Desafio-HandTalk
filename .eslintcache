[{"/home/victorpc/Downloads/desafio_handtalk/src/App.js":"1","/home/victorpc/Downloads/desafio_handtalk/src/index.js":"2","/home/victorpc/Downloads/desafio_handtalk/src/view/NavBar.jsx":"3","/home/victorpc/Downloads/desafio_handtalk/src/pages/index.jsx":"4","/home/victorpc/Downloads/desafio_handtalk/src/component/index.jsx":"5","/home/victorpc/Downloads/desafio_handtalk/src/auth/Login.jsx":"6","/home/victorpc/Downloads/desafio_handtalk/src/auth/Cadastro.jsx":"7","/home/victorpc/Downloads/desafio_handtalk/src/helpers/fbConfig.jsx":"8","/home/victorpc/Downloads/desafio_handtalk/src/models/index.jsx":"9","/home/victorpc/Downloads/desafio_handtalk/src/component/indexDialog.jsx":"10","/home/victorpc/Downloads/desafio_handtalk/src/reportWebVitals.js":"11"},{"size":965,"mtime":1630439594328,"results":"12","hashOfConfig":"13"},{"size":500,"mtime":1607147519000,"results":"14","hashOfConfig":"13"},{"size":2515,"mtime":1630453185731,"results":"15","hashOfConfig":"13"},{"size":8119,"mtime":1630453263385,"results":"16","hashOfConfig":"13"},{"size":1520,"mtime":1630452104461,"results":"17","hashOfConfig":"13"},{"size":6084,"mtime":1630442328024,"results":"18","hashOfConfig":"13"},{"size":6212,"mtime":1630451596009,"results":"19","hashOfConfig":"13"},{"size":519,"mtime":1630451021948,"results":"20","hashOfConfig":"13"},{"size":272,"mtime":1630444560536,"results":"21","hashOfConfig":"13"},{"size":3958,"mtime":1630453440006,"results":"22","hashOfConfig":"13"},{"size":362,"mtime":1607147519000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"17u2q4q",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/home/victorpc/Downloads/desafio_handtalk/src/App.js",[],["55","56"],"/home/victorpc/Downloads/desafio_handtalk/src/index.js",[],"/home/victorpc/Downloads/desafio_handtalk/src/view/NavBar.jsx",["57"],"import React from 'react';\nimport {AppBar, Toolbar, IconButton, Typography, Menu, MenuItem, makeStyles} from '@material-ui/core';\nimport {AccountCircle} from '@material-ui/icons';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1\n    },\n    menubackgroud: {\n        background: 'linear-gradient(45deg, white 10%, 30%, orange 90%)',\n    }, \n    title: {\n        flexGrow: 1,\n        color: 'black'\n    }\n}));\n\nconst NavBar = (props) => {\n    const classes = useStyles();\n    const [auth, setAuth] = React.useState(true);\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleClose = () => {\n        localStorage.removeItem('user');\n        props.setUserState();\n        setAnchorEl(null);\n    }\n\n\n    const handleCloseMenu = () => {\n        setAnchorEl(null);\n    }\n\n    const handleMenu = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" className={classes.menubackgroud}>\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Desafio-HandTalk\n                    </Typography>\n                    {auth && (\n                    <div>\n                        <IconButton\n                        aria-label=\"account of current user\"\n                        aria-controls=\"menu-appbar\"\n                        aria-haspopup=\"true\"\n                        onClick={handleMenu}\n                        color=\"inherit\"\n                        >\n                        <AccountCircle />\n                        </IconButton>\n                        <Menu\n                        id=\"menu-appbar\"\n                        anchorEl={anchorEl}\n                        anchorOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right',\n                        }}\n                        keepMounted\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right',\n                        }}\n                        open={open}\n                        onClose={handleCloseMenu}\n                        >\n                        <MenuItem onClick={handleClose}>Sair</MenuItem>\n                        </Menu>\n                    </div>\n                    )}\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\n\n\nexport default NavBar;","/home/victorpc/Downloads/desafio_handtalk/src/pages/index.jsx",[],["58","59"],"/home/victorpc/Downloads/desafio_handtalk/src/component/index.jsx",[],["60","61"],"/home/victorpc/Downloads/desafio_handtalk/src/auth/Login.jsx",["62"],"import React, { useState } from 'react';\nimport { Container, CssBaseline, Typography, FormControlLabel, Button, Checkbox, Grid, Link, makeStyles, Card, CardContent\n} from '@material-ui/core';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport fire from '../helpers/fbConfig';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { ScaleLoader } from 'react-spinners';\nimport Logo from '../asserts/icon.png';\n\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        background: 'linear-gradient(45deg, white 10%, 30%, orange 90%)',\n        margin: theme.spacing(3, 0, 2),\n        color: '#fff'\n    },\n    card: {\n        marginTop: '60px',\n        paddingLeft: '20px',\n        paddingRight: '20px',\n        paddingBottom: '20px',\n    },\n    pointer: {\n        cursor: 'pointer',\n        color: 'red'\n    }\n}));\n\nconst Login = (props) => {\n    const classes = useStyles();\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [rememberme, setRememberMe] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const override = `\n        display: flex;\n        margin-left: 100px;\n        border-color: orange;\n    `;\n    const handleEmail = (event) => {\n        setEmail(event.target.value);\n    }\n    const handlePassword = (event) => {\n        setPassword(event.target.value);\n    }\n    const handleCheck = (event) => {\n        setRememberMe(event.target.checked);\n    }\n    const handlerLogin = () => {\n        setLoading(true);\n        fire.auth()\n            .signInWithEmailAndPassword(email, password)\n            .then(response => {\n                const { user } = response;\n                const data = {\n                    userId: user.uid,\n                    email: user.email\n                }\n                localStorage.setItem('user', JSON.stringify(data));\n                const storage = localStorage.getItem('user');\n                const loggedInUser = storage !== null ? JSON.parse(storage) : null;\n                props.loggedIn(loggedInUser);\n                setLoading(false);\n            }).catch(error => {\n                toast.error(error.message);\n                setLoading(false);\n            });\n\n    }\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <Card className={classes.card}>\n                <CardContent>\n                    <ToastContainer />\n                    <CssBaseline />\n                    <div className={classes.paper}>\n                        <img src={Logo} />\n                        <Typography component=\"h1\" variant=\"h5\">\n                            Login\n                        </Typography>\n                        <ValidatorForm\n                            onSubmit={handlerLogin}\n                            onError={errors => {\n                                for (const err of errors) {\n                                    console.log(err.props.errorMessages[0])\n                                }\n                            }}\n                            className={classes.form}>\n                            <TextValidator\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                fullWidth\n                                label=\"Email\"\n                                onChange={handleEmail}\n                                name=\"email\"\n                                value={email}\n                                validators={['required', 'isEmail']}\n                                errorMessages={['Campo Obrigatorio', 'Email Invalido']}\n                                autoComplete='off' />\n                            <TextValidator\n                                variant=\"outlined\"\n                                fullWidth\n                                label=\"Password\"\n                                onChange={handlePassword}\n                                name=\"password\"\n                                type=\"password\"\n                                value={password}\n                                validators={['required']}\n                                errorMessages={['Campo Obrigatorio']}\n                                autoComplete=\"off\"\n                            />\n                            <FormControlLabel\n                                control={<Checkbox value={rememberme} onChange={(e) => handleCheck(e)} color=\"primary\" />}\n                                label=\"Lembrar-me\"\n                            />\n                            {loading ? (\n                                <ScaleLoader\n                                    css={override}\n                                    size={150}\n                                    color={\"#eb4034\"}\n                                    loading={loading} />\n                            ) : (\n                                <Button\n                                    type=\"submit\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    className={classes.submit}\n                                >\n                                    Entrar\n                                </Button>\n                            )}\n\n                            <Grid container>\n                                <Grid item>\n                                    <Link onClick={props.toggle} className={classes.pointer} variant=\"body2\">\n                                        {\"Não possui conta? Cadastre-se\"}\n                                    </Link>\n                                </Grid>\n                            </Grid>\n                        </ValidatorForm>\n                    </div>\n                </CardContent>\n            </Card>\n        </Container>\n    );\n}\n\n\nexport default Login;",["63","64"],"/home/victorpc/Downloads/desafio_handtalk/src/auth/Cadastro.jsx",["65","66"],"import React, {useEffect, useState} from 'react';\nimport {Container, CssBaseline, Typography, Button, Grid, Link, makeStyles, Card, CardContent} from '@material-ui/core';\nimport {ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\nimport fire from '../helpers/fbConfig';\nimport {ToastContainer, toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'\nimport Logo from '../asserts/icon.png';\n\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n      },\n      form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n      },\n      submit: {\n          background: 'linear-gradient(45deg, white 10%, 30%, orange 90%)',\n          margin: theme.spacing(3, 0, 2),\n          color: '#fff'\n      },\n      card: {\n          marginTop: '60px',\n          paddingLeft: '20px',\n          paddingRight: '20px',\n          paddingBottom: '20px',\n      },\n      pointer: {\n          cursor: 'pointer',\n          color: 'red'\n      }\n}));\n\nconst SignUp = (props) => {\n    const classes = useStyles();\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    \n    const handleEmail = (event) => {\n        setEmail(event.target.value);\n    }\n    const handlePassword = (event) => {\n        setPassword(event.target.value);\n    }\n    const handleConfirmPassowerd = (event) => {\n        setConfirmPassword(event.target.value);\n    }\n    const handleSignUp = () => {\n        fire.auth()\n            .createUserWithEmailAndPassword(email, password)\n            .then(response => {\n                if(response) {\n                    props.toggle();\n                    toast.success('Usuario Cadastrado com Sucesso!!');\n                }\n            }).catch((error) => {\n                switch (error.code) {\n                    case 'auth/email-already-in-use':\n                        toast.error(error.message);\n                        break;\n                    case 'auth/invalid-email': \n                        toast.error(error.message);                    \n                        break;\n                    case 'auth/weak-password':\n                        toast.error(error.message);\n                        break;\n                }\n            });\n    }\n\n    useEffect(() => {\n        ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\n            if(value !== password) {\n                return false;\n            }\n            return true;\n        });\n        return () => {\n            ValidatorForm.removeValidationRule('isPasswordMatch');\n        }\n    }, [password])\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <Card className={classes.card}>\n                <CardContent>\n                    <ToastContainer/>\n                    <CssBaseline/>\n                    <div className={classes.paper}>\n                        <img src={Logo} />\n                        <Typography component=\"h1\" variant=\"h5\">\n                            Cadastro\n                        </Typography>\n                        <ValidatorForm \n                         onSubmit={handleSignUp}\n                         className={classes.form}>\n                        <TextValidator\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                fullWidth\n                                label=\"Email\"\n                                onChange={handleEmail}\n                                name=\"email\"\n                                value={email}\n                                validators={['required', 'isEmail']}\n                                errorMessages={['Campo Obrigatorio', 'Email Invalido']}\n                                autoComplete='off'\n                            />\n                            <br/>\n                            <TextValidator\n                                variant=\"outlined\"\n                                fullWidth\n                                label=\"Password\"\n                                onChange={handlePassword}\n                                name=\"password\"\n                                type=\"password\"\n                                value={password}\n                                validators={['required']}\n                                errorMessages={['Campo Obrigatorio']}\n                                autoComplete=\"off\"\n                            />\n                            <br/>\n                            <TextValidator\n                                variant=\"outlined\"\n                                label=\"Confirm password\"\n                                fullWidth\n                                onChange={handleConfirmPassowerd}\n                                name=\"confirmPassword\"\n                                type=\"password\"\n                                validators={['isPasswordMatch', 'required']}\n                                errorMessages={['Senha incorreta', 'Campo Obrigatorio']}\n                                value={confirmPassword}\n                                autoComplete=\"off\"\n                            />\n                             <Button\n                                type=\"submit\"\n                                fullWidth\n                                variant=\"contained\"\n                                className={classes.submit}\n                            >\n                                Cadastrar\n                            </Button>\n                            <Grid container>\n                                <Grid item>\n                                <Link onClick={props.toggle} className={classes.pointer} variant=\"body2\">\n                                    {\"Ja possui conta? Faça o login\"}\n                                </Link>\n                                </Grid>\n                            </Grid>\n                        </ValidatorForm>\n                    </div>\n                </CardContent>\n            </Card>\n        </Container>\n    );\n}\n\n\nexport default SignUp;",["67","68"],"/home/victorpc/Downloads/desafio_handtalk/src/helpers/fbConfig.jsx",[],"/home/victorpc/Downloads/desafio_handtalk/src/models/index.jsx",[],"/home/victorpc/Downloads/desafio_handtalk/src/component/indexDialog.jsx",[],"/home/victorpc/Downloads/desafio_handtalk/src/reportWebVitals.js",[],["69","70"],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":20,"column":18,"nodeType":"77","messageId":"78","endLine":20,"endColumn":25},{"ruleId":"71","replacedBy":"79"},{"ruleId":"73","replacedBy":"80"},{"ruleId":"71","replacedBy":"81"},{"ruleId":"73","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":88,"column":25,"nodeType":"85","endLine":88,"endColumn":43},{"ruleId":"71","replacedBy":"86"},{"ruleId":"73","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":62,"column":17,"nodeType":"90","messageId":"91","endLine":72,"endColumn":18},{"ruleId":"83","severity":1,"message":"84","line":94,"column":25,"nodeType":"85","endLine":94,"endColumn":43},{"ruleId":"71","replacedBy":"92"},{"ruleId":"73","replacedBy":"93"},{"ruleId":"71","replacedBy":"94"},{"ruleId":"73","replacedBy":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'setAuth' is assigned a value but never used.","Identifier","unusedVar",["96"],["97"],["96"],["97"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["96"],["97"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["96"],["97"],["96"],["97"],"no-global-assign","no-unsafe-negation"]